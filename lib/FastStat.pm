package FastStat;

use strict;
use warnings;
use Carp;

use base 'Exporter';
our @EXPORT = qw(factorial     factorial_calc_arr
                 combinatorial combinatorial_fast
                 binomial_pdf  binomial_pdf_fast
                 binomial_cdf  binomial_cdf_fast
                 poisson_cdf   poisson_cdf_fast);

# _fast() functions take an array of factorials to speed up calculations
# this factorial array is generated by factorial_calc_arr

sub factorial
{
  my ($i) = @_;
  my $ret = 1;
  for(; $i > 1; $i--) { $ret *= $i; }
  return $ret;
}

# generate first len values of the factorial function
# 1, 1, 2, 6, 24, 120, ...
sub factorial_calc_arr
{
  my ($len) = @_;

  my $accum = 1;
  my @factorials = (1);

  for(my $i = 1; $i < $len; $i++) {
    $accum *= $i;
    push(@factorials, $accum);
  }

  return @factorials;
}

sub combinatorial
{
  my ($n,$k) = @_;
  return factorial($n)/(factorial($k)*factorial($n-$k));
}

sub combinatorial_fast
{
  my ($n,$k,$factorial_arr) = @_;
  return $factorial_arr->[$n]/($factorial_arr->[$k]*$factorial_arr->[$n-$k]);
}

sub binomial_pdf
{
  my ($n,$k,$p) = @_;
  return combinatorial($n,$k) * $p**$k * (1-$p)**($n-$k);
}

sub binomial_pdf_fast
{
  my ($n,$k,$p,$factorial_arr) = @_;
  return combinatorial_fast($n,$k,$factorial_arr) * $p**$k * (1-$p)**($n-$k);
}

sub binomial_cdf
{
  my ($n,$k,$p) = @_;
  my $binom = 0;
  for(my $i = 0; $i <= $k; $i++) { $binom += binomial_pdf($n,$k,$p); }
}

sub binomial_cdf_fast
{
  my ($n,$k,$p,$factorial_arr) = @_;
  my $binom = 0;
  for(my $i = 0; $i <= $k; $i++) { $binom += binomial_pdf_fast($n,$k,$p,$factorial_arr); }
}

sub poisson_cdf
{
  my ($lambda,$i) = @_;
  if($lambda == 0) { return 0; }
  return (exp(1) ** -$lambda) * sum(map {($lambda ** $_) / factorial($_)} (0..$i));
}

sub poisson_cdf_fast
{
  my ($lambda,$i,$factorial_arr) = @_;
  if($lambda == 0) { return 0; }
  return (exp(1) ** -$lambda) * sum(map {($lambda ** $_) / $factorial_arr->[$_]} (0..$i));
}

1;
